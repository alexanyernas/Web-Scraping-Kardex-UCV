# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: [ main, 2.0.0-dev ]
    paths-ignore:
      - '**/*.md'
      - '**/*.rst'
  pull_request:
    branches: [ main, 2.0.0-dev ]
    paths-ignore:
      - '**/*.md'
      - '**/*.rst'

jobs:
  tests:
    name: pytest on ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]
        use-cryptodome: [""]
        include:
          - python-version: "3.10"
            use-cryptodome: "false"
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: Cache Downloaded Files
      id: cache-downloaded-files
      uses: actions/cache@v3
      with:
        path: '**/tests/pdf_cache/*'
        key: cache-downloaded-files
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '**/requirements/ci.txt'
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip
    - name: Install requirements (Python 3)
      run: |
        pip install -r requirements/ci.txt
    - name: Remove cryptodome
      run: |
        pip uninstall pycryptodome -y
      if: matrix.use-cryptodome == 'false'
    - name: Install PyPDF2
      run: |
        pip install .
    - name: Test with flake8
      run: |
        flake8 .
    - name: Test with pytest
      run: |
        python -m coverage run --parallel-mode -m pytest tests -vv
    - name: Test with mypy
      run : |
        mypy PyPDF2 --show-error-codes --disallow-untyped-defs --disallow-incomplete-defs
    - name: Upload coverage data
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: .coverage.*
        if-no-files-found: ignore

  package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install build twine check-wheel-contents
      - run: python -m build --sdist --wheel .
      - run: ls -l dist
      - run: check-wheel-contents dist/*.whl
      - name: Check long_description
        run: python -m twine check dist/*
        
      - name: Test installing package
        run: python -m pip install .

      - name: Test running installed package
        working-directory: /tmp
        run: python -c "import PyPDF2;print(PyPDF2.__version__)"

      # - name: Release to pypi if tagged.
      #   if: startsWith(github.ref, 'refs/tags')
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Create Github release if tagged.
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1

  coverage:
    name: Combine & check coverage.
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          # Use latest Python, so it understands all syntax.
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install --upgrade coverage[toml]

      - uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & create xml report
        run: |
          python -m coverage combine
          python -m coverage xml
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
